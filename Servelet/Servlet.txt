                   Web applicatoin
                        Types 
static  it already prepare , when the static page run then its code comes on the web page 
dynamic it prepare at the run time , when the dynamic page run then its responese only come 


Servlet Is a specfication to build dynamic web Apps using Java // servlet is interface between serve

CGI(Common Gateway Interface) : use for backend programming in c, c++,purl : it create diffrent process for same task

Servlet is work on (request - response mechanism ) 

computer - apache tomcat (web server) - web container - Small servlet 

delpoy website - init() call
req 1  - services() call
req 2  - services() call
req 3  - services() call
req 4  - services() call
req 5  - services() call
undeploy  - destory () call
 Servlet Life Cycle

      Init 
 
     Services

     Destory 

// installation part to set the path of apache tomcat

set path=C:\Program Files\Java\jdk-21\bin
set classpath="%classpath%",;C:\Program Files\Apache Software Foundation\Tomcat 10.1\lib\servlet-api.jar;

javap jakarta.servlet.Servlet : there is 5 abstract method in jakarta 
javap jakarta.servlet.GenricServlet

if we want to create your own Servlet class then you have to implement all the abstact method present in the servlet class  
public interface jakarta.servlet.Servlet {
  public abstract void init(jakarta.servlet.ServletConfig) throws jakarta.servlet.ServletException;
  public abstract jakarta.servlet.ServletConfig getServletConfig();
  public abstract void service(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  public abstract java.lang.String getServletInfo();
  public abstract void destroy();
}
javap jakarta.servlet.GenricServlet
in Servelt there is easy method to create a servlet class - GenricServlet for this there is interface Servlet and its import is import jakarta.servlet.GenricServlet  
  public jakarta.servlet.GenericServlet();
  public void destroy();
  public java.lang.String getInitParameter(java.lang.String);
  public java.util.Enumeration<java.lang.String> getInitParameterNames();
  public jakarta.servlet.ServletConfig getServletConfig();
  public jakarta.servlet.ServletContext getServletContext();
  public java.lang.String getServletInfo();
  public void init(jakarta.servlet.ServletConfig) throws jakarta.servlet.ServletException;
  public void init() throws jakarta.servlet.ServletException;
  public void log(java.lang.String);
  public void log(java.lang.String, java.lang.Throwable);
  public abstract void service(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  public java.lang.String getServletName();
}

in the genericservlet destroy method has given body and init() also only service method is abstract but in normal servlet there is all abstract method init, services ,and destory , there 5 abstract method and you have to mandatry to implemet all the abstract method that are present the abstract class 

but in GenricServlet you have to only one method to implement services() method 


so for more comfort there one more class is HTTPServlet and there is no abstract mehthod   in this 

Servlet -Interface(5 abstract method )

GenericServlet -abstract class (1 abstract method )

HTTPServlet-Interface(5 abstract method ) javap jakarta.servlet.http.HttpServlet
public abstract class jakarta.servlet.http.HttpServlet extends jakarta.servlet.GenericServlet {
  public static final java.lang.String LEGACY_DO_HEAD;
  public jakarta.servlet.http.HttpServlet();
  public void init(jakarta.servlet.ServletConfig) throws jakarta.servlet.ServletException;
  protected void doGet(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected long getLastModified(jakarta.servlet.http.HttpServletRequest);
  protected void doHead(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void doPost(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void doPut(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void doDelete(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void doOptions(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void doTrace(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  protected void service(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  public void service(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) throws jakarta.servlet.ServletException, java.io.IOException;
  static {};
}


file structure of a Servlet Apllication 

Rootfolder (Project Name )
  Sourcefoler -
        .java 
        .java
        .java
        .java
  WEB-INF 
     class 
         .class 
         .class 
         .class 
         .class 
         .class 
     
      Static(Staitc content file like html css javascript)
      
      lib (jar(Java Archived) files)  
     
     Web.xml(Deployment Discripter-in this file there procedure of deployment of application of server) 
       
//war(Web Archived) -when you deploy the your servlet applicatio on server then file that was deploy on server is war file -  it constract of  all web-info file ,lib ,web.xml

// In core java there is main function but in servet there is no main class , all the classes in servlet it call by web container (web container does not no about the main function it only know about the init services and destory)

javap jakarta.servlet.ServletResponse
Compiled from "ServletResponse.java"
public interface jakarta.servlet.ServletResponse {
  public abstract java.lang.String getCharacterEncoding();
  public abstract java.lang.String getContentType();
  public abstract jakarta.servlet.ServletOutputStream getOutputStream() throws java.io.IOException; // forStrings output 
  public abstract java.io.PrintWriter getWriter() throws java.io.IOException; // for characters
  public abstract void setCharacterEncoding(java.lang.String);
  public abstract void setContentLength(int);
  public abstract void setContentLengthLong(long);
  public abstract void setContentType(java.lang.String);
  public abstract void setBufferSize(int);
  public abstract int getBufferSize();
  public abstract void flushBuffer() throws java.io.IOException;
  public abstract void resetBuffer();
  public abstract boolean isCommitted();
  public abstract void reset();
  public abstract void setLocale(java.util.Locale);
  public abstract java.util.Locale getLocale();
}

// FOR COMPILE javac firstServlet.java
// for create war file - FirstServletApp>jar cvf firstProject.war .
C:\Program Files\Apache Software Foundation\Tomcat 10.1\lib --open tomcat 10
// open localhost:8082 - manage app-deploy war file option -select War file from your project 


// to configure in the net benas we have follow these steps 
1  go on windows option -> services -> server -> right click add server -> enter the admin and password -> select the file of apache tom cat option in program files -> finish 

// to create a new project for servlet in net beans 
-> file menu -> new project ->  java anti -> java web -> slect the web application -> next -> next ->finsih 


// to configure in the appache tomcat eclipe we have follow these steps 
  go on windows option -> show view-> services -> at terminal create server click it  -> right click add server -> apache ->apache 10.1->next->select the file of apache tom cat option in program files -> finish 

there is a differnece in topcat 9 and tomcat 10
-> topcat9
Release notes - Known issues in this Apache Tomcat release.
Apache Tomcat Server Configuration Reference - Reference manual that documents all available elements and attributes that may be placed into the Apache Tomcat conf/server.xml file.
JK Documentation - Complete documentation and HOWTOs on the JK native webserver connector, used to interface Apache Tomcat with servers like Apache HTTPd, IIS and others.
Servlet 4.0 Specification and Javadoc
JSP 2.3 Specification and Javadoc
EL 3.0 Specification and Javadoc
WebSocket 1.1 Specification and Javadoc
JASPIC 1.1 Specification and Javadoc
->topcat10
Release notes - Known issues in this Apache Tomcat release.
Apache Tomcat Server Configuration Reference - Reference manual that documents all available elements and attributes that may be placed into the Apache Tomcat conf/server.xml file.
JK Documentation - Complete documentation and HOWTOs on the JK native webserver connector, used to interface Apache Tomcat with servers like Apache HTTPd, IIS and others.
Servlet 6.0 Specification and Javadoc
JSP 3.1 Specification and Javadoc
EL 5.0 Specification and Javadoc
WebSocket 2.1 Specification and Javadoc
Authentication 2.0 Specification and Javadoc

// to create web application 
-> right click on the project section -> dynamic application -> give name -> next -> next -> finish 


//Welcome file list and Request dispatcher

->when user does not specify the which wep is needed as a responnse then there is a by default page index.html ,welcome file list is used to change default setting of giving response index.jsp
// request dispacher

-> When we need to shift one servlet to another then we use servlet dispatcher

















